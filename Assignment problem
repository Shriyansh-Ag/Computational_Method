clc;
clear;

disp("=== Single-Step Assignment for 3x3 ===");

// Original cost matrix
C = [9 2 7;
     6 4 3;
     5 8 1];

[n, ~] = size(C);

// Step 1: Row Reduction
for i = 1:n
    C(i,:) = C(i,:) - min(C(i,:));
end

// Step 2: Column Reduction
for j = 1:n
    C(:,j) = C(:,j) - min(C(:,j));
end

disp("Reduced Cost Matrix:");
disp(C);

// Step 3: Single-step greedy assignment on 0s
assigned_rows = zeros(1, n);
assigned_cols = zeros(1, n);
assignment = zeros(n, 2);
count = 0;

for i = 1:n
    for j = 1:n
        if C(i,j) == 0 & assigned_rows(i) == 0 & assigned_cols(j) == 0 then
            assignment(i,:) = [i, j];
            assigned_rows(i) = 1;
            assigned_cols(j) = 1;
            count = count + 1;
            break; // move to next worker
        end
    end
end

// Display assignments
disp("Assignments (Worker → Job):");
for i = 1:n
    if assignment(i,1) > 0 then
        printf("Worker %d → Job %d\n", assignment(i,1), assignment(i,2));
    end
end

// Calculate total cost
original_cost = [9 2 7;
                 6 4 3;
                 5 8 1];

total_cost = 0;
for i = 1:n
    r = assignment(i,1);
    c = assignment(i,2);
    total_cost = total_cost + original_cost(r,c);
end

disp("Total Assignment Cost:");
disp(total_cost);
